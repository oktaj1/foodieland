<?php 
namespace App\Http\Controllers\Auth;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\Mail;
use App\Mail\ResetPasswordMail;
use App\Http\Controllers\Controller;

class ForgotPasswordController extends Controller
{
    /**
     * Send a reset password link to the user.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function sendResetLinkEmail(Request $request)
    {
        

          // Validate the email input
    $request->validate(['email' => 'required|email']);

    // Send the reset link to the user's email
    $response = Password::broker()->sendResetLink(
        $request->only('email')
    );

    
    // Check the response from the sendResetLink method
    if ($response == Password::RESET_LINK_SENT) {
        // Retrieve the user to send the email
        $user = \App\Models\User::where('email', $request->email)->first();

        if ($user) {
            // Generate the password reset URL using the token generated by the Password broker
            $token = \Illuminate\Support\Str::random(60); // Generate a token
            $resetUrl = url(config('app.url') . route('password.reset', ['token' => $token, 'email' => $request->email], false));

            // Send the reset password email using the custom Blade view
            Mail::to($user->email)->send(new ResetPasswordMail($user, $resetUrl));

            return response()->json(['message' => 'Password reset link sent']);
        } else {
            return response()->json(['message' => 'User not found'], 404);
        }
    } elseif ($response == Password::RESET_THROTTLED) {
        return response()->json(['message' => 'Too many requests. Please wait before trying again.'], 429);
    } else {
        return response()->json(['message' => 'Unable to send reset link'], 400);
    }
    }
}

